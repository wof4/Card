{"ast":null,"code":"import { isString } from '../core/utils.js';\nimport IMask from '../core/holder.js';\nimport '../_rollupPluginBabelHelpers-b054ecd2.js';\nimport '../core/change-details.js';\n/** Get Masked class by mask type */\n\nfunction maskedClass(mask) {\n  if (mask == null) {\n    throw new Error('mask property should be defined');\n  } // $FlowFixMe\n\n\n  if (mask instanceof RegExp) return IMask.MaskedRegExp; // $FlowFixMe\n\n  if (isString(mask)) return IMask.MaskedPattern; // $FlowFixMe\n\n  if (mask instanceof Date || mask === Date) return IMask.MaskedDate; // $FlowFixMe\n\n  if (mask instanceof Number || typeof mask === 'number' || mask === Number) return IMask.MaskedNumber; // $FlowFixMe\n\n  if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic; // $FlowFixMe\n\n  if (IMask.Masked && mask.prototype instanceof IMask.Masked) return mask; // $FlowFixMe\n\n  if (mask instanceof IMask.Masked) return mask.constructor; // $FlowFixMe\n\n  if (mask instanceof Function) return IMask.MaskedFunction;\n  console.warn('Mask not found for mask', mask); // eslint-disable-line no-console\n  // $FlowFixMe\n\n  return IMask.Masked;\n}\n/** Creates new {@link Masked} depending on mask type */\n\n\nfunction createMask(opts) {\n  // $FlowFixMe\n  if (IMask.Masked && opts instanceof IMask.Masked) return opts;\n  opts = Object.assign({}, opts);\n  var mask = opts.mask; // $FlowFixMe\n\n  if (IMask.Masked && mask instanceof IMask.Masked) return mask;\n  var MaskedClass = maskedClass(mask);\n  if (!MaskedClass) throw new Error('Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.');\n  return new MaskedClass(opts);\n}\n\nIMask.createMask = createMask;\nexport { createMask as default, maskedClass };","map":{"version":3,"sources":["C:/Users/yulya/Desktop/Новая папка/card/client/node_modules/imask/esm/masked/factory.js"],"names":["isString","IMask","maskedClass","mask","Error","RegExp","MaskedRegExp","MaskedPattern","Date","MaskedDate","Number","MaskedNumber","Array","isArray","MaskedDynamic","Masked","prototype","constructor","Function","MaskedFunction","console","warn","createMask","opts","Object","assign","MaskedClass","default"],"mappings":"AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAO,0CAAP;AACA,OAAO,2BAAP;AAEA;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,MAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD,GAHwB,CAGvB;;;AAGF,MAAID,IAAI,YAAYE,MAApB,EAA4B,OAAOJ,KAAK,CAACK,YAAb,CANH,CAM8B;;AAEvD,MAAIN,QAAQ,CAACG,IAAD,CAAZ,EAAoB,OAAOF,KAAK,CAACM,aAAb,CARK,CAQuB;;AAEhD,MAAIJ,IAAI,YAAYK,IAAhB,IAAwBL,IAAI,KAAKK,IAArC,EAA2C,OAAOP,KAAK,CAACQ,UAAb,CAVlB,CAU2C;;AAEpE,MAAIN,IAAI,YAAYO,MAAhB,IAA0B,OAAOP,IAAP,KAAgB,QAA1C,IAAsDA,IAAI,KAAKO,MAAnE,EAA2E,OAAOT,KAAK,CAACU,YAAb,CAZlD,CAY6E;;AAEtG,MAAIC,KAAK,CAACC,OAAN,CAAcV,IAAd,KAAuBA,IAAI,KAAKS,KAApC,EAA2C,OAAOX,KAAK,CAACa,aAAb,CAdlB,CAc8C;;AAEvE,MAAIb,KAAK,CAACc,MAAN,IAAgBZ,IAAI,CAACa,SAAL,YAA0Bf,KAAK,CAACc,MAApD,EAA4D,OAAOZ,IAAP,CAhBnC,CAgBgD;;AAEzE,MAAIA,IAAI,YAAYF,KAAK,CAACc,MAA1B,EAAkC,OAAOZ,IAAI,CAACc,WAAZ,CAlBT,CAkBkC;;AAE3D,MAAId,IAAI,YAAYe,QAApB,EAA8B,OAAOjB,KAAK,CAACkB,cAAb;AAC9BC,EAAAA,OAAO,CAACC,IAAR,CAAa,yBAAb,EAAwClB,IAAxC,EArByB,CAqBsB;AAC/C;;AAEA,SAAOF,KAAK,CAACc,MAAb;AACD;AACD;;;AAEA,SAASO,UAAT,CAAoBC,IAApB,EAA0B;AACxB;AACA,MAAItB,KAAK,CAACc,MAAN,IAAgBQ,IAAI,YAAYtB,KAAK,CAACc,MAA1C,EAAkD,OAAOQ,IAAP;AAClDA,EAAAA,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,CAAP;AACA,MAAIpB,IAAI,GAAGoB,IAAI,CAACpB,IAAhB,CAJwB,CAIF;;AAEtB,MAAIF,KAAK,CAACc,MAAN,IAAgBZ,IAAI,YAAYF,KAAK,CAACc,MAA1C,EAAkD,OAAOZ,IAAP;AAClD,MAAIuB,WAAW,GAAGxB,WAAW,CAACC,IAAD,CAA7B;AACA,MAAI,CAACuB,WAAL,EAAkB,MAAM,IAAItB,KAAJ,CAAU,mHAAV,CAAN;AAClB,SAAO,IAAIsB,WAAJ,CAAgBH,IAAhB,CAAP;AACD;;AACDtB,KAAK,CAACqB,UAAN,GAAmBA,UAAnB;AAEA,SAASA,UAAU,IAAIK,OAAvB,EAAgCzB,WAAhC","sourcesContent":["import { isString } from '../core/utils.js';\nimport IMask from '../core/holder.js';\nimport '../_rollupPluginBabelHelpers-b054ecd2.js';\nimport '../core/change-details.js';\n\n/** Get Masked class by mask type */\n\nfunction maskedClass(mask) {\n  if (mask == null) {\n    throw new Error('mask property should be defined');\n  } // $FlowFixMe\n\n\n  if (mask instanceof RegExp) return IMask.MaskedRegExp; // $FlowFixMe\n\n  if (isString(mask)) return IMask.MaskedPattern; // $FlowFixMe\n\n  if (mask instanceof Date || mask === Date) return IMask.MaskedDate; // $FlowFixMe\n\n  if (mask instanceof Number || typeof mask === 'number' || mask === Number) return IMask.MaskedNumber; // $FlowFixMe\n\n  if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic; // $FlowFixMe\n\n  if (IMask.Masked && mask.prototype instanceof IMask.Masked) return mask; // $FlowFixMe\n\n  if (mask instanceof IMask.Masked) return mask.constructor; // $FlowFixMe\n\n  if (mask instanceof Function) return IMask.MaskedFunction;\n  console.warn('Mask not found for mask', mask); // eslint-disable-line no-console\n  // $FlowFixMe\n\n  return IMask.Masked;\n}\n/** Creates new {@link Masked} depending on mask type */\n\nfunction createMask(opts) {\n  // $FlowFixMe\n  if (IMask.Masked && opts instanceof IMask.Masked) return opts;\n  opts = Object.assign({}, opts);\n  var mask = opts.mask; // $FlowFixMe\n\n  if (IMask.Masked && mask instanceof IMask.Masked) return mask;\n  var MaskedClass = maskedClass(mask);\n  if (!MaskedClass) throw new Error('Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.');\n  return new MaskedClass(opts);\n}\nIMask.createMask = createMask;\n\nexport { createMask as default, maskedClass };\n"]},"metadata":{},"sourceType":"module"}