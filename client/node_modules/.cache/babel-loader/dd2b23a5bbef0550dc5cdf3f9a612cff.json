{"ast":null,"code":"import { d as _inherits, e as _createSuper, a as _classCallCheck, _ as _createClass, g as _get, h as _getPrototypeOf, f as _slicedToArray, i as _set } from '../_rollupPluginBabelHelpers-b054ecd2.js';\nimport { escapeRegExp, normalizePrepare, DIRECTION } from '../core/utils.js';\nimport ChangeDetails from '../core/change-details.js';\nimport Masked from './base.js';\nimport IMask from '../core/holder.js';\nimport '../core/continuous-tail-details.js';\n/**\n  Number mask\n  @param {Object} opts\n  @param {string} opts.radix - Single char\n  @param {string} opts.thousandsSeparator - Single char\n  @param {Array<string>} opts.mapToRadix - Array of single chars\n  @param {number} opts.min\n  @param {number} opts.max\n  @param {number} opts.scale - Digits after point\n  @param {boolean} opts.signed - Allow negative\n  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\n  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\n*/\n\nvar MaskedNumber = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedNumber, _Masked);\n\n  var _super = _createSuper(MaskedNumber);\n  /** Single char */\n\n  /** Single char */\n\n  /** Array of single chars */\n\n  /** */\n\n  /** */\n\n  /** Digits after point */\n\n  /** */\n\n  /** Flag to remove leading and trailing zeros in the end of editing */\n\n  /** Flag to pad trailing zeros after point in the end of editing */\n\n\n  function MaskedNumber(opts) {\n    _classCallCheck(this, MaskedNumber);\n\n    return _super.call(this, Object.assign({}, MaskedNumber.DEFAULTS, opts));\n  }\n  /**\n    @override\n  */\n\n\n  _createClass(MaskedNumber, [{\n    key: \"_update\",\n    value: function _update(opts) {\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"_update\", this).call(this, opts);\n\n      this._updateRegExps();\n    }\n    /** */\n\n  }, {\n    key: \"_updateRegExps\",\n    value: function _updateRegExps() {\n      // use different regexp to process user input (more strict, input suffix) and tail shifting\n      var start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n      var midInput = '(0|([1-9]+\\\\d*))?';\n      var mid = '\\\\d*';\n      var end = (this.scale ? '(' + escapeRegExp(this.radix) + '\\\\d{0,' + this.scale + '})?' : '') + '$';\n      this._numberRegExpInput = new RegExp(start + midInput + end);\n      this._numberRegExp = new RegExp(start + mid + end);\n      this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(escapeRegExp).join('') + ']', 'g');\n      this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n    }\n    /** */\n\n  }, {\n    key: \"_removeThousandsSeparators\",\n    value: function _removeThousandsSeparators(value) {\n      return value.replace(this._thousandsSeparatorRegExp, '');\n    }\n    /** */\n\n  }, {\n    key: \"_insertThousandsSeparators\",\n    value: function _insertThousandsSeparators(value) {\n      // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n      var parts = value.split(this.radix);\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n      return parts.join(this.radix);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doPrepare\",\n    value: function doPrepare(ch) {\n      var _get2;\n\n      ch = ch.replace(this._mapToRadixRegExp, this.radix);\n\n      var noSepCh = this._removeThousandsSeparators(ch);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var _normalizePrepare = normalizePrepare((_get2 = _get(_getPrototypeOf(MaskedNumber.prototype), \"doPrepare\", this)).call.apply(_get2, [this, noSepCh].concat(args))),\n          _normalizePrepare2 = _slicedToArray(_normalizePrepare, 2),\n          prepCh = _normalizePrepare2[0],\n          details = _normalizePrepare2[1];\n\n      if (ch && !noSepCh) details.skip = true;\n      return [prepCh, details];\n    }\n    /** */\n\n  }, {\n    key: \"_separatorsCount\",\n    value: function _separatorsCount(to) {\n      var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var count = 0;\n\n      for (var pos = 0; pos < to; ++pos) {\n        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n          ++count;\n          if (extendOnSeparators) to += this.thousandsSeparator.length;\n        }\n      }\n\n      return count;\n    }\n    /** */\n\n  }, {\n    key: \"_separatorsCountFromSlice\",\n    value: function _separatorsCountFromSlice() {\n      var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\n      return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit2 = _slicedToArray(_this$_adjustRangeWit, 2);\n\n      fromPos = _this$_adjustRangeWit2[0];\n      toPos = _this$_adjustRangeWit2[1];\n      return this._removeThousandsSeparators(_get(_getPrototypeOf(MaskedNumber.prototype), \"extractInput\", this).call(this, fromPos, toPos, flags));\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this.thousandsSeparator) return _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n      var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n\n      this._value = this._removeThousandsSeparators(this.value);\n\n      var appendDetails = _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n\n      this._value = this._insertThousandsSeparators(this._value);\n      var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n\n      appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n      appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n      return appendDetails;\n    }\n    /** */\n\n  }, {\n    key: \"_findSeparatorAround\",\n    value: function _findSeparatorAround(pos) {\n      if (this.thousandsSeparator) {\n        var searchFrom = pos - this.thousandsSeparator.length + 1;\n        var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n        if (separatorPos <= pos) return separatorPos;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"_adjustRangeWithSeparators\",\n    value: function _adjustRangeWithSeparators(from, to) {\n      var separatorAroundFromPos = this._findSeparatorAround(from);\n\n      if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n\n      var separatorAroundToPos = this._findSeparatorAround(to);\n\n      if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n      return [from, to];\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n      var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit4 = _slicedToArray(_this$_adjustRangeWit3, 2);\n\n      fromPos = _this$_adjustRangeWit4[0];\n      toPos = _this$_adjustRangeWit4[1];\n      var valueBeforePos = this.value.slice(0, fromPos);\n      var valueAfterPos = this.value.slice(toPos);\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n\n      this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n\n      return new ChangeDetails({\n        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos, direction) {\n      if (!this.thousandsSeparator) return cursorPos;\n\n      switch (direction) {\n        case DIRECTION.NONE:\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n          {\n            var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n\n            if (separatorAtLeftPos >= 0) {\n              var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n\n              if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\n                return separatorAtLeftPos;\n              }\n            }\n\n            break;\n          }\n\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n          {\n            var separatorAtRightPos = this._findSeparatorAround(cursorPos);\n\n            if (separatorAtRightPos >= 0) {\n              return separatorAtRightPos + this.thousandsSeparator.length;\n            }\n          }\n      }\n\n      return cursorPos;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate(flags) {\n      var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string\n\n      var valid = regexp.test(this._removeThousandsSeparators(this.value));\n\n      if (valid) {\n        // validate as number\n        var number = this.number;\n        valid = valid && !isNaN(number) && ( // check min bound for negative values\n        this.min == null || this.min >= 0 || this.min <= this.number) && ( // check max bound for positive values\n        this.max == null || this.max <= 0 || this.number <= this.max);\n      }\n\n      return valid && _get(_getPrototypeOf(MaskedNumber.prototype), \"doValidate\", this).call(this, flags);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      if (this.value) {\n        var number = this.number;\n        var validnum = number; // check bounds\n\n        if (this.min != null) validnum = Math.max(validnum, this.min);\n        if (this.max != null) validnum = Math.min(validnum, this.max);\n        if (validnum !== number) this.unmaskedValue = String(validnum);\n        var formatted = this.value;\n        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n        if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);\n        this._value = formatted;\n      }\n\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"doCommit\", this).call(this);\n    }\n    /** */\n\n  }, {\n    key: \"_normalizeZeros\",\n    value: function _normalizeZeros(value) {\n      var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros\n\n\n      parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\n        return sign + num;\n      }); // add leading zero\n\n      if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n\n      if (parts.length > 1) {\n        parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n\n        if (!parts[1].length) parts.length = 1; // remove fractional\n      }\n\n      return this._insertThousandsSeparators(parts.join(this.radix));\n    }\n    /** */\n\n  }, {\n    key: \"_padFractionalZeros\",\n    value: function _padFractionalZeros(value) {\n      if (!value) return value;\n      var parts = value.split(this.radix);\n      if (parts.length < 2) parts.push('');\n      parts[1] = parts[1].padEnd(this.scale, '0');\n      return parts.join(this.radix);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');\n    },\n    set: function set(unmaskedValue) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", unmaskedValue.replace('.', this.radix), this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return Number(this.unmaskedValue);\n    },\n    set: function set(n) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", String(n), this, true);\n    }\n    /** Parsed Number */\n\n  }, {\n    key: \"number\",\n    get: function get() {\n      return this.typedValue;\n    },\n    set: function set(number) {\n      this.typedValue = number;\n    }\n    /**\n      Is negative allowed\n      @readonly\n    */\n\n  }, {\n    key: \"allowNegative\",\n    get: function get() {\n      return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n    }\n  }]);\n\n  return MaskedNumber;\n}(Masked);\n\nMaskedNumber.DEFAULTS = {\n  radix: ',',\n  thousandsSeparator: '',\n  mapToRadix: ['.'],\n  scale: 2,\n  signed: false,\n  normalizeZeros: true,\n  padFractionalZeros: false\n};\nIMask.MaskedNumber = MaskedNumber;\nexport { MaskedNumber as default };","map":{"version":3,"sources":["C:/Users/yulya/Desktop/Новая папка/card/client/node_modules/imask/esm/masked/number.js"],"names":["d","_inherits","e","_createSuper","a","_classCallCheck","_","_createClass","g","_get","h","_getPrototypeOf","f","_slicedToArray","i","_set","escapeRegExp","normalizePrepare","DIRECTION","ChangeDetails","Masked","IMask","MaskedNumber","_Masked","_super","opts","call","Object","assign","DEFAULTS","key","value","_update","prototype","_updateRegExps","start","allowNegative","midInput","mid","end","scale","radix","_numberRegExpInput","RegExp","_numberRegExp","_mapToRadixRegExp","mapToRadix","map","join","_thousandsSeparatorRegExp","thousandsSeparator","_removeThousandsSeparators","replace","_insertThousandsSeparators","parts","split","doPrepare","ch","_get2","noSepCh","_len","arguments","length","args","Array","_key","_normalizePrepare","apply","concat","_normalizePrepare2","prepCh","details","skip","_separatorsCount","to","extendOnSeparators","undefined","count","pos","_value","indexOf","_separatorsCountFromSlice","slice","extractInput","fromPos","toPos","flags","_this$_adjustRangeWit","_adjustRangeWithSeparators","_this$_adjustRangeWit2","_appendCharRaw","prevBeforeTailValue","tail","_beforeTailState","prevBeforeTailSeparatorsCount","appendDetails","beforeTailValue","beforeTailSeparatorsCount","tailShift","rawInserted","_findSeparatorAround","searchFrom","separatorPos","from","separatorAroundFromPos","separatorAroundToPos","remove","_this$_adjustRangeWit3","_this$_adjustRangeWit4","valueBeforePos","valueAfterPos","nearestInputPos","cursorPos","direction","NONE","LEFT","FORCE_LEFT","separatorAtLeftPos","separatorAtLeftEndPos","RIGHT","FORCE_RIGHT","separatorAtRightPos","doValidate","regexp","input","valid","test","number","isNaN","min","max","doCommit","validnum","Math","unmaskedValue","String","formatted","normalizeZeros","_normalizeZeros","padFractionalZeros","_padFractionalZeros","match","sign","zeros","num","push","padEnd","get","set","Number","n","typedValue","signed","default"],"mappings":"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","sourcesContent":["import { d as _inherits, e as _createSuper, a as _classCallCheck, _ as _createClass, g as _get, h as _getPrototypeOf, f as _slicedToArray, i as _set } from '../_rollupPluginBabelHelpers-b054ecd2.js';\nimport { escapeRegExp, normalizePrepare, DIRECTION } from '../core/utils.js';\nimport ChangeDetails from '../core/change-details.js';\nimport Masked from './base.js';\nimport IMask from '../core/holder.js';\nimport '../core/continuous-tail-details.js';\n\n/**\n  Number mask\n  @param {Object} opts\n  @param {string} opts.radix - Single char\n  @param {string} opts.thousandsSeparator - Single char\n  @param {Array<string>} opts.mapToRadix - Array of single chars\n  @param {number} opts.min\n  @param {number} opts.max\n  @param {number} opts.scale - Digits after point\n  @param {boolean} opts.signed - Allow negative\n  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\n  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\n*/\nvar MaskedNumber = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedNumber, _Masked);\n\n  var _super = _createSuper(MaskedNumber);\n\n  /** Single char */\n\n  /** Single char */\n\n  /** Array of single chars */\n\n  /** */\n\n  /** */\n\n  /** Digits after point */\n\n  /** */\n\n  /** Flag to remove leading and trailing zeros in the end of editing */\n\n  /** Flag to pad trailing zeros after point in the end of editing */\n  function MaskedNumber(opts) {\n    _classCallCheck(this, MaskedNumber);\n\n    return _super.call(this, Object.assign({}, MaskedNumber.DEFAULTS, opts));\n  }\n  /**\n    @override\n  */\n\n\n  _createClass(MaskedNumber, [{\n    key: \"_update\",\n    value: function _update(opts) {\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"_update\", this).call(this, opts);\n\n      this._updateRegExps();\n    }\n    /** */\n\n  }, {\n    key: \"_updateRegExps\",\n    value: function _updateRegExps() {\n      // use different regexp to process user input (more strict, input suffix) and tail shifting\n      var start = '^' + (this.allowNegative ? '[+|\\\\-]?' : '');\n      var midInput = '(0|([1-9]+\\\\d*))?';\n      var mid = '\\\\d*';\n      var end = (this.scale ? '(' + escapeRegExp(this.radix) + '\\\\d{0,' + this.scale + '})?' : '') + '$';\n      this._numberRegExpInput = new RegExp(start + midInput + end);\n      this._numberRegExp = new RegExp(start + mid + end);\n      this._mapToRadixRegExp = new RegExp('[' + this.mapToRadix.map(escapeRegExp).join('') + ']', 'g');\n      this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');\n    }\n    /** */\n\n  }, {\n    key: \"_removeThousandsSeparators\",\n    value: function _removeThousandsSeparators(value) {\n      return value.replace(this._thousandsSeparatorRegExp, '');\n    }\n    /** */\n\n  }, {\n    key: \"_insertThousandsSeparators\",\n    value: function _insertThousandsSeparators(value) {\n      // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n      var parts = value.split(this.radix);\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n      return parts.join(this.radix);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doPrepare\",\n    value: function doPrepare(ch) {\n      var _get2;\n\n      ch = ch.replace(this._mapToRadixRegExp, this.radix);\n\n      var noSepCh = this._removeThousandsSeparators(ch);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var _normalizePrepare = normalizePrepare((_get2 = _get(_getPrototypeOf(MaskedNumber.prototype), \"doPrepare\", this)).call.apply(_get2, [this, noSepCh].concat(args))),\n          _normalizePrepare2 = _slicedToArray(_normalizePrepare, 2),\n          prepCh = _normalizePrepare2[0],\n          details = _normalizePrepare2[1];\n\n      if (ch && !noSepCh) details.skip = true;\n      return [prepCh, details];\n    }\n    /** */\n\n  }, {\n    key: \"_separatorsCount\",\n    value: function _separatorsCount(to) {\n      var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var count = 0;\n\n      for (var pos = 0; pos < to; ++pos) {\n        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n          ++count;\n          if (extendOnSeparators) to += this.thousandsSeparator.length;\n        }\n      }\n\n      return count;\n    }\n    /** */\n\n  }, {\n    key: \"_separatorsCountFromSlice\",\n    value: function _separatorsCountFromSlice() {\n      var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\n      return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"extractInput\",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit2 = _slicedToArray(_this$_adjustRangeWit, 2);\n\n      fromPos = _this$_adjustRangeWit2[0];\n      toPos = _this$_adjustRangeWit2[1];\n      return this._removeThousandsSeparators(_get(_getPrototypeOf(MaskedNumber.prototype), \"extractInput\", this).call(this, fromPos, toPos, flags));\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"_appendCharRaw\",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this.thousandsSeparator) return _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n      var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n\n      this._value = this._removeThousandsSeparators(this.value);\n\n      var appendDetails = _get(_getPrototypeOf(MaskedNumber.prototype), \"_appendCharRaw\", this).call(this, ch, flags);\n\n      this._value = this._insertThousandsSeparators(this._value);\n      var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n\n      appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n      appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n      return appendDetails;\n    }\n    /** */\n\n  }, {\n    key: \"_findSeparatorAround\",\n    value: function _findSeparatorAround(pos) {\n      if (this.thousandsSeparator) {\n        var searchFrom = pos - this.thousandsSeparator.length + 1;\n        var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n        if (separatorPos <= pos) return separatorPos;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"_adjustRangeWithSeparators\",\n    value: function _adjustRangeWithSeparators(from, to) {\n      var separatorAroundFromPos = this._findSeparatorAround(from);\n\n      if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n\n      var separatorAroundToPos = this._findSeparatorAround(to);\n\n      if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n      return [from, to];\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n      var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit4 = _slicedToArray(_this$_adjustRangeWit3, 2);\n\n      fromPos = _this$_adjustRangeWit4[0];\n      toPos = _this$_adjustRangeWit4[1];\n      var valueBeforePos = this.value.slice(0, fromPos);\n      var valueAfterPos = this.value.slice(toPos);\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n\n      this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n\n      return new ChangeDetails({\n        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n      });\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"nearestInputPos\",\n    value: function nearestInputPos(cursorPos, direction) {\n      if (!this.thousandsSeparator) return cursorPos;\n\n      switch (direction) {\n        case DIRECTION.NONE:\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n          {\n            var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n\n            if (separatorAtLeftPos >= 0) {\n              var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n\n              if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\n                return separatorAtLeftPos;\n              }\n            }\n\n            break;\n          }\n\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n          {\n            var separatorAtRightPos = this._findSeparatorAround(cursorPos);\n\n            if (separatorAtRightPos >= 0) {\n              return separatorAtRightPos + this.thousandsSeparator.length;\n            }\n          }\n      }\n\n      return cursorPos;\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doValidate\",\n    value: function doValidate(flags) {\n      var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string\n\n      var valid = regexp.test(this._removeThousandsSeparators(this.value));\n\n      if (valid) {\n        // validate as number\n        var number = this.number;\n        valid = valid && !isNaN(number) && ( // check min bound for negative values\n        this.min == null || this.min >= 0 || this.min <= this.number) && ( // check max bound for positive values\n        this.max == null || this.max <= 0 || this.number <= this.max);\n      }\n\n      return valid && _get(_getPrototypeOf(MaskedNumber.prototype), \"doValidate\", this).call(this, flags);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"doCommit\",\n    value: function doCommit() {\n      if (this.value) {\n        var number = this.number;\n        var validnum = number; // check bounds\n\n        if (this.min != null) validnum = Math.max(validnum, this.min);\n        if (this.max != null) validnum = Math.min(validnum, this.max);\n        if (validnum !== number) this.unmaskedValue = String(validnum);\n        var formatted = this.value;\n        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n        if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);\n        this._value = formatted;\n      }\n\n      _get(_getPrototypeOf(MaskedNumber.prototype), \"doCommit\", this).call(this);\n    }\n    /** */\n\n  }, {\n    key: \"_normalizeZeros\",\n    value: function _normalizeZeros(value) {\n      var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros\n\n\n      parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\n        return sign + num;\n      }); // add leading zero\n\n      if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + '0';\n\n      if (parts.length > 1) {\n        parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros\n\n        if (!parts[1].length) parts.length = 1; // remove fractional\n      }\n\n      return this._insertThousandsSeparators(parts.join(this.radix));\n    }\n    /** */\n\n  }, {\n    key: \"_padFractionalZeros\",\n    value: function _padFractionalZeros(value) {\n      if (!value) return value;\n      var parts = value.split(this.radix);\n      if (parts.length < 2) parts.push('');\n      parts[1] = parts[1].padEnd(this.scale, '0');\n      return parts.join(this.radix);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"unmaskedValue\",\n    get: function get() {\n      return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, '.');\n    },\n    set: function set(unmaskedValue) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", unmaskedValue.replace('.', this.radix), this, true);\n    }\n    /**\n      @override\n    */\n\n  }, {\n    key: \"typedValue\",\n    get: function get() {\n      return Number(this.unmaskedValue);\n    },\n    set: function set(n) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), \"unmaskedValue\", String(n), this, true);\n    }\n    /** Parsed Number */\n\n  }, {\n    key: \"number\",\n    get: function get() {\n      return this.typedValue;\n    },\n    set: function set(number) {\n      this.typedValue = number;\n    }\n    /**\n      Is negative allowed\n      @readonly\n    */\n\n  }, {\n    key: \"allowNegative\",\n    get: function get() {\n      return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n    }\n  }]);\n\n  return MaskedNumber;\n}(Masked);\nMaskedNumber.DEFAULTS = {\n  radix: ',',\n  thousandsSeparator: '',\n  mapToRadix: ['.'],\n  scale: 2,\n  signed: false,\n  normalizeZeros: true,\n  padFractionalZeros: false\n};\nIMask.MaskedNumber = MaskedNumber;\n\nexport { MaskedNumber as default };\n"]},"metadata":{},"sourceType":"module"}